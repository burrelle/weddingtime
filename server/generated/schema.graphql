### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Guest {
  attending: Boolean!
  forename: String!
  id: ID!
  rsvp: RSVP!
  surname: String!
}

input GuestCreateInput {
  attending: Boolean
  forename: String!
  id: ID
  rsvp: RSVPCreateOneWithoutGuestsInput!
  surname: String!
}

input GuestCreateManyWithoutRsvpInput {
  connect: [GuestWhereUniqueInput!]
  create: [GuestCreateWithoutRsvpInput!]
}

input GuestCreateWithoutRsvpInput {
  attending: Boolean
  forename: String!
  id: ID
  surname: String!
}

enum GuestOrderByInput {
  attending_ASC
  attending_DESC
  createdAt_ASC
  createdAt_DESC
  forename_ASC
  forename_DESC
  id_ASC
  id_DESC
  surname_ASC
  surname_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GuestWhereInput {
  AND: [GuestWhereInput!]
  attending: Boolean
  attending_not: Boolean
  forename: String
  forename_contains: String
  forename_ends_with: String
  forename_gt: String
  forename_gte: String
  forename_in: [String!]
  forename_lt: String
  forename_lte: String
  forename_not: String
  forename_not_contains: String
  forename_not_ends_with: String
  forename_not_in: [String!]
  forename_not_starts_with: String
  forename_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  rsvp: RSVPWhereInput
  surname: String
  surname_contains: String
  surname_ends_with: String
  surname_gt: String
  surname_gte: String
  surname_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_not: String
  surname_not_contains: String
  surname_not_ends_with: String
  surname_not_in: [String!]
  surname_not_starts_with: String
  surname_starts_with: String
}

input GuestWhereUniqueInput {
  id: ID
}

type Mutation {
  createGuest(data: GuestCreateInput!): Guest!
  createRSVP(data: RSVPCreateInput!): RSVP!
}

type Query {
  guest(where: GuestWhereUniqueInput!): Guest
  guests(after: String, before: String, first: Int, last: Int, orderBy: GuestOrderByInput, skip: Int, where: GuestWhereInput): [Guest!]!
  guestsAttending: [Guest!]!
  guestsNotAttending: [Guest!]!
  rsvp(where: RSVPWhereUniqueInput!): RSVP
  rsvps(after: String, before: String, first: Int, last: Int, orderBy: RSVPOrderByInput, skip: Int, where: RSVPWhereInput): [RSVP!]!
}

type RSVP {
  guests(after: String, before: String, first: Int, last: Int, orderBy: GuestOrderByInput, skip: Int, where: GuestWhereInput): [Guest!]
  id: ID!
  party: String!
}

input RSVPCreateInput {
  guests: GuestCreateManyWithoutRsvpInput
  id: ID
  party: String!
}

input RSVPCreateOneWithoutGuestsInput {
  connect: RSVPWhereUniqueInput
  create: RSVPCreateWithoutGuestsInput
}

input RSVPCreateWithoutGuestsInput {
  id: ID
  party: String!
}

enum RSVPOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  party_ASC
  party_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RSVPWhereInput {
  AND: [RSVPWhereInput!]
  guests_every: GuestWhereInput
  guests_none: GuestWhereInput
  guests_some: GuestWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [RSVPWhereInput!]
  OR: [RSVPWhereInput!]
  party: String
  party_contains: String
  party_ends_with: String
  party_gt: String
  party_gte: String
  party_in: [String!]
  party_lt: String
  party_lte: String
  party_not: String
  party_not_contains: String
  party_not_ends_with: String
  party_not_in: [String!]
  party_not_starts_with: String
  party_starts_with: String
}

input RSVPWhereUniqueInput {
  id: ID
  party: String
}
