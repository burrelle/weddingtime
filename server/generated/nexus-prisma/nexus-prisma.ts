/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      RSVP: RSVPObject
      Guest: GuestObject
      RSVPConnection: RSVPConnectionObject
      RSVPEdge: RSVPEdgeObject
      AggregateRSVP: AggregateRSVPObject
      GuestConnection: GuestConnectionObject
      GuestEdge: GuestEdgeObject
      AggregateGuest: AggregateGuestObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      RSVPSubscriptionPayload: RSVPSubscriptionPayloadObject
      RSVPPreviousValues: RSVPPreviousValuesObject
      GuestSubscriptionPayload: GuestSubscriptionPayloadObject
      GuestPreviousValues: GuestPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      RSVP: RSVPFieldDetails
      Guest: GuestFieldDetails
      RSVPConnection: RSVPConnectionFieldDetails
      RSVPEdge: RSVPEdgeFieldDetails
      AggregateRSVP: AggregateRSVPFieldDetails
      GuestConnection: GuestConnectionFieldDetails
      GuestEdge: GuestEdgeFieldDetails
      AggregateGuest: AggregateGuestFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      RSVPSubscriptionPayload: RSVPSubscriptionPayloadFieldDetails
      RSVPPreviousValues: RSVPPreviousValuesFieldDetails
      GuestSubscriptionPayload: GuestSubscriptionPayloadFieldDetails
      GuestPreviousValues: GuestPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      RSVPWhereUniqueInput: RSVPWhereUniqueInputInputObject
      GuestWhereInput: GuestWhereInputInputObject
      RSVPWhereInput: RSVPWhereInputInputObject
      GuestWhereUniqueInput: GuestWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      RSVPCreateInput: RSVPCreateInputInputObject
      GuestCreateManyWithoutRsvpInput: GuestCreateManyWithoutRsvpInputInputObject
      GuestCreateWithoutRsvpInput: GuestCreateWithoutRsvpInputInputObject
      RSVPUpdateInput: RSVPUpdateInputInputObject
      GuestUpdateManyWithoutRsvpInput: GuestUpdateManyWithoutRsvpInputInputObject
      GuestUpdateWithWhereUniqueWithoutRsvpInput: GuestUpdateWithWhereUniqueWithoutRsvpInputInputObject
      GuestUpdateWithoutRsvpDataInput: GuestUpdateWithoutRsvpDataInputInputObject
      GuestUpsertWithWhereUniqueWithoutRsvpInput: GuestUpsertWithWhereUniqueWithoutRsvpInputInputObject
      GuestScalarWhereInput: GuestScalarWhereInputInputObject
      GuestUpdateManyWithWhereNestedInput: GuestUpdateManyWithWhereNestedInputInputObject
      GuestUpdateManyDataInput: GuestUpdateManyDataInputInputObject
      RSVPUpdateManyMutationInput: RSVPUpdateManyMutationInputInputObject
      GuestCreateInput: GuestCreateInputInputObject
      RSVPCreateOneWithoutGuestsInput: RSVPCreateOneWithoutGuestsInputInputObject
      RSVPCreateWithoutGuestsInput: RSVPCreateWithoutGuestsInputInputObject
      GuestUpdateInput: GuestUpdateInputInputObject
      RSVPUpdateOneRequiredWithoutGuestsInput: RSVPUpdateOneRequiredWithoutGuestsInputInputObject
      RSVPUpdateWithoutGuestsDataInput: RSVPUpdateWithoutGuestsDataInputInputObject
      RSVPUpsertWithoutGuestsInput: RSVPUpsertWithoutGuestsInputInputObject
      GuestUpdateManyMutationInput: GuestUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      RSVPSubscriptionWhereInput: RSVPSubscriptionWhereInputInputObject
      GuestSubscriptionWhereInput: GuestSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    GuestOrderByInput: GuestOrderByInputValues,
    RSVPOrderByInput: RSVPOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'rSVP', args?: QueryRSVPArgs[] | false, alias?: string  } 
  | { name: 'rSVPs', args?: QueryRSVPsArgs[] | false, alias?: string  } 
  | { name: 'rSVPsConnection', args?: QueryRSVPsConnectionArgs[] | false, alias?: string  } 
  | { name: 'guest', args?: QueryGuestArgs[] | false, alias?: string  } 
  | { name: 'guests', args?: QueryGuestsArgs[] | false, alias?: string  } 
  | { name: 'guestsConnection', args?: QueryGuestsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'rSVP'
  | 'rSVPs'
  | 'rSVPsConnection'
  | 'guest'
  | 'guests'
  | 'guestsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRSVPArgs =
  | 'where'
type QueryRSVPsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRSVPsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuestArgs =
  | 'where'
type QueryGuestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGuestsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  rSVP: {
    type: 'RSVP'
    args: Record<QueryRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RSVPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP | null> | prisma.RSVP | null
  }
  rSVPs: {
    type: 'RSVP'
    args: Record<QueryRSVPsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RSVPWhereInput | null, orderBy?: prisma.RSVPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP[]> | prisma.RSVP[]
  }
  rSVPsConnection: {
    type: 'RSVPConnection'
    args: Record<QueryRSVPsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RSVPWhereInput | null, orderBy?: prisma.RSVPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVPConnection> | prisma.RSVPConnection
  }
  guest: {
    type: 'Guest'
    args: Record<QueryGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GuestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest | null> | prisma.Guest | null
  }
  guests: {
    type: 'Guest'
    args: Record<QueryGuestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuestWhereInput | null, orderBy?: prisma.GuestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest[]> | prisma.Guest[]
  }
  guestsConnection: {
    type: 'GuestConnection'
    args: Record<QueryGuestsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GuestWhereInput | null, orderBy?: prisma.GuestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuestConnection> | prisma.GuestConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RSVP

type RSVPObject =
  | RSVPFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'party', args?: [] | false, alias?: string  } 
  | { name: 'guests', args?: RSVPGuestsArgs[] | false, alias?: string  } 

type RSVPFields =
  | 'id'
  | 'party'
  | 'guests'


type RSVPGuestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RSVPFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  party: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guests: {
    type: 'Guest'
    args: Record<RSVPGuestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RSVP">,
      args: { where?: GuestWhereInput | null, orderBy?: prisma.GuestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest[]> | prisma.Guest[]
  }
}
  

// Types for Guest

type GuestObject =
  | GuestFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'forename', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'attending', args?: [] | false, alias?: string  } 
  | { name: 'rsvp', args?: [] | false, alias?: string  } 

type GuestFields =
  | 'id'
  | 'forename'
  | 'surname'
  | 'attending'
  | 'rsvp'



  

export interface GuestFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  forename: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  attending: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rsvp: {
    type: 'RSVP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Guest">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP> | prisma.RSVP
  }
}
  

// Types for RSVPConnection

type RSVPConnectionObject =
  | RSVPConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RSVPConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RSVPConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RSVPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RSVPEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RSVPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVPEdge[]> | prisma.RSVPEdge[]
  }
  aggregate: {
    type: 'AggregateRSVP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RSVPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRSVP> | prisma.AggregateRSVP
  }
}
  

// Types for RSVPEdge

type RSVPEdgeObject =
  | RSVPEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RSVPEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RSVPEdgeFieldDetails {
  node: {
    type: 'RSVP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RSVPEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP> | prisma.RSVP
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRSVP

type AggregateRSVPObject =
  | AggregateRSVPFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRSVPFields =
  | 'count'



  

export interface AggregateRSVPFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuestConnection

type GuestConnectionObject =
  | GuestConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GuestConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GuestConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GuestEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GuestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuestEdge[]> | prisma.GuestEdge[]
  }
  aggregate: {
    type: 'AggregateGuest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGuest> | prisma.AggregateGuest
  }
}
  

// Types for GuestEdge

type GuestEdgeObject =
  | GuestEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GuestEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GuestEdgeFieldDetails {
  node: {
    type: 'Guest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuestEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest> | prisma.Guest
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGuest

type AggregateGuestObject =
  | AggregateGuestFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGuestFields =
  | 'count'



  

export interface AggregateGuestFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createRSVP', args?: MutationCreateRSVPArgs[] | false, alias?: string  } 
  | { name: 'updateRSVP', args?: MutationUpdateRSVPArgs[] | false, alias?: string  } 
  | { name: 'updateManyRSVPs', args?: MutationUpdateManyRSVPsArgs[] | false, alias?: string  } 
  | { name: 'upsertRSVP', args?: MutationUpsertRSVPArgs[] | false, alias?: string  } 
  | { name: 'deleteRSVP', args?: MutationDeleteRSVPArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRSVPs', args?: MutationDeleteManyRSVPsArgs[] | false, alias?: string  } 
  | { name: 'createGuest', args?: MutationCreateGuestArgs[] | false, alias?: string  } 
  | { name: 'updateGuest', args?: MutationUpdateGuestArgs[] | false, alias?: string  } 
  | { name: 'updateManyGuests', args?: MutationUpdateManyGuestsArgs[] | false, alias?: string  } 
  | { name: 'upsertGuest', args?: MutationUpsertGuestArgs[] | false, alias?: string  } 
  | { name: 'deleteGuest', args?: MutationDeleteGuestArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGuests', args?: MutationDeleteManyGuestsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createRSVP'
  | 'updateRSVP'
  | 'updateManyRSVPs'
  | 'upsertRSVP'
  | 'deleteRSVP'
  | 'deleteManyRSVPs'
  | 'createGuest'
  | 'updateGuest'
  | 'updateManyGuests'
  | 'upsertGuest'
  | 'deleteGuest'
  | 'deleteManyGuests'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateRSVPArgs =
  | 'data'
type MutationUpdateRSVPArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRSVPsArgs =
  | 'data'
  | 'where'
type MutationUpsertRSVPArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRSVPArgs =
  | 'where'
type MutationDeleteManyRSVPsArgs =
  | 'where'
type MutationCreateGuestArgs =
  | 'data'
type MutationUpdateGuestArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGuestsArgs =
  | 'data'
  | 'where'
type MutationUpsertGuestArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGuestArgs =
  | 'where'
type MutationDeleteManyGuestsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRSVP: {
    type: 'RSVP'
    args: Record<MutationCreateRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RSVPCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP> | prisma.RSVP
  }
  updateRSVP: {
    type: 'RSVP'
    args: Record<MutationUpdateRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RSVPUpdateInput, where: RSVPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP | null> | prisma.RSVP | null
  }
  updateManyRSVPs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRSVPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RSVPUpdateManyMutationInput, where?: RSVPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRSVP: {
    type: 'RSVP'
    args: Record<MutationUpsertRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RSVPWhereUniqueInput, create: RSVPCreateInput, update: RSVPUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP> | prisma.RSVP
  }
  deleteRSVP: {
    type: 'RSVP'
    args: Record<MutationDeleteRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RSVPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP | null> | prisma.RSVP | null
  }
  deleteManyRSVPs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRSVPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RSVPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGuest: {
    type: 'Guest'
    args: Record<MutationCreateGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuestCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest> | prisma.Guest
  }
  updateGuest: {
    type: 'Guest'
    args: Record<MutationUpdateGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuestUpdateInput, where: GuestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest | null> | prisma.Guest | null
  }
  updateManyGuests: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGuestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GuestUpdateManyMutationInput, where?: GuestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGuest: {
    type: 'Guest'
    args: Record<MutationUpsertGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuestWhereUniqueInput, create: GuestCreateInput, update: GuestUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest> | prisma.Guest
  }
  deleteGuest: {
    type: 'Guest'
    args: Record<MutationDeleteGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GuestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest | null> | prisma.Guest | null
  }
  deleteManyGuests: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGuestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GuestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'rSVP', args?: SubscriptionRSVPArgs[] | false, alias?: string  } 
  | { name: 'guest', args?: SubscriptionGuestArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'rSVP'
  | 'guest'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionRSVPArgs =
  | 'where'
type SubscriptionGuestArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  rSVP: {
    type: 'RSVPSubscriptionPayload'
    args: Record<SubscriptionRSVPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RSVPSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVPSubscriptionPayload | null> | prisma.RSVPSubscriptionPayload | null
  }
  guest: {
    type: 'GuestSubscriptionPayload'
    args: Record<SubscriptionGuestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GuestSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuestSubscriptionPayload | null> | prisma.GuestSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RSVPSubscriptionPayload

type RSVPSubscriptionPayloadObject =
  | RSVPSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RSVPSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RSVPSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RSVPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'RSVP'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RSVPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVP | null> | prisma.RSVP | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RSVPPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RSVPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RSVPPreviousValues | null> | prisma.RSVPPreviousValues | null
  }
}
  

// Types for RSVPPreviousValues

type RSVPPreviousValuesObject =
  | RSVPPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'party', args?: [] | false, alias?: string  } 

type RSVPPreviousValuesFields =
  | 'id'
  | 'party'



  

export interface RSVPPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  party: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GuestSubscriptionPayload

type GuestSubscriptionPayloadObject =
  | GuestSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GuestSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GuestSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GuestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Guest'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Guest | null> | prisma.Guest | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GuestPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GuestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GuestPreviousValues | null> | prisma.GuestPreviousValues | null
  }
}
  

// Types for GuestPreviousValues

type GuestPreviousValuesObject =
  | GuestPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'forename', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'attending', args?: [] | false, alias?: string  } 

type GuestPreviousValuesFields =
  | 'id'
  | 'forename'
  | 'surname'
  | 'attending'



  

export interface GuestPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  forename: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  attending: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RSVPWhereUniqueInput {
  id?: string | null
  party?: string | null
}
export type RSVPWhereUniqueInputInputObject =
  | Extract<keyof RSVPWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'party', alias?: string  } 
  
export interface GuestWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  forename?: string | null
  forename_not?: string | null
  forename_in?: string[]
  forename_not_in?: string[]
  forename_lt?: string | null
  forename_lte?: string | null
  forename_gt?: string | null
  forename_gte?: string | null
  forename_contains?: string | null
  forename_not_contains?: string | null
  forename_starts_with?: string | null
  forename_not_starts_with?: string | null
  forename_ends_with?: string | null
  forename_not_ends_with?: string | null
  surname?: string | null
  surname_not?: string | null
  surname_in?: string[]
  surname_not_in?: string[]
  surname_lt?: string | null
  surname_lte?: string | null
  surname_gt?: string | null
  surname_gte?: string | null
  surname_contains?: string | null
  surname_not_contains?: string | null
  surname_starts_with?: string | null
  surname_not_starts_with?: string | null
  surname_ends_with?: string | null
  surname_not_ends_with?: string | null
  attending?: boolean | null
  attending_not?: boolean | null
  rsvp?: RSVPWhereInput | null
  AND?: GuestWhereInput[]
  OR?: GuestWhereInput[]
  NOT?: GuestWhereInput[]
}
export type GuestWhereInputInputObject =
  | Extract<keyof GuestWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'forename', alias?: string  } 
  | { name: 'forename_not', alias?: string  } 
  | { name: 'forename_in', alias?: string  } 
  | { name: 'forename_not_in', alias?: string  } 
  | { name: 'forename_lt', alias?: string  } 
  | { name: 'forename_lte', alias?: string  } 
  | { name: 'forename_gt', alias?: string  } 
  | { name: 'forename_gte', alias?: string  } 
  | { name: 'forename_contains', alias?: string  } 
  | { name: 'forename_not_contains', alias?: string  } 
  | { name: 'forename_starts_with', alias?: string  } 
  | { name: 'forename_not_starts_with', alias?: string  } 
  | { name: 'forename_ends_with', alias?: string  } 
  | { name: 'forename_not_ends_with', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'surname_not', alias?: string  } 
  | { name: 'surname_in', alias?: string  } 
  | { name: 'surname_not_in', alias?: string  } 
  | { name: 'surname_lt', alias?: string  } 
  | { name: 'surname_lte', alias?: string  } 
  | { name: 'surname_gt', alias?: string  } 
  | { name: 'surname_gte', alias?: string  } 
  | { name: 'surname_contains', alias?: string  } 
  | { name: 'surname_not_contains', alias?: string  } 
  | { name: 'surname_starts_with', alias?: string  } 
  | { name: 'surname_not_starts_with', alias?: string  } 
  | { name: 'surname_ends_with', alias?: string  } 
  | { name: 'surname_not_ends_with', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  | { name: 'attending_not', alias?: string  } 
  | { name: 'rsvp', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RSVPWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  party?: string | null
  party_not?: string | null
  party_in?: string[]
  party_not_in?: string[]
  party_lt?: string | null
  party_lte?: string | null
  party_gt?: string | null
  party_gte?: string | null
  party_contains?: string | null
  party_not_contains?: string | null
  party_starts_with?: string | null
  party_not_starts_with?: string | null
  party_ends_with?: string | null
  party_not_ends_with?: string | null
  guests_every?: GuestWhereInput | null
  guests_some?: GuestWhereInput | null
  guests_none?: GuestWhereInput | null
  AND?: RSVPWhereInput[]
  OR?: RSVPWhereInput[]
  NOT?: RSVPWhereInput[]
}
export type RSVPWhereInputInputObject =
  | Extract<keyof RSVPWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'party_not', alias?: string  } 
  | { name: 'party_in', alias?: string  } 
  | { name: 'party_not_in', alias?: string  } 
  | { name: 'party_lt', alias?: string  } 
  | { name: 'party_lte', alias?: string  } 
  | { name: 'party_gt', alias?: string  } 
  | { name: 'party_gte', alias?: string  } 
  | { name: 'party_contains', alias?: string  } 
  | { name: 'party_not_contains', alias?: string  } 
  | { name: 'party_starts_with', alias?: string  } 
  | { name: 'party_not_starts_with', alias?: string  } 
  | { name: 'party_ends_with', alias?: string  } 
  | { name: 'party_not_ends_with', alias?: string  } 
  | { name: 'guests_every', alias?: string  } 
  | { name: 'guests_some', alias?: string  } 
  | { name: 'guests_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuestWhereUniqueInput {
  id?: string | null
}
export type GuestWhereUniqueInputInputObject =
  | Extract<keyof GuestWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface RSVPCreateInput {
  id?: string | null
  party?: string
  guests?: GuestCreateManyWithoutRsvpInput | null
}
export type RSVPCreateInputInputObject =
  | Extract<keyof RSVPCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'party', alias?: string  } 
  | { name: 'guests', alias?: string  } 
  
export interface GuestCreateManyWithoutRsvpInput {
  create?: GuestCreateWithoutRsvpInput[]
  connect?: GuestWhereUniqueInput[]
}
export type GuestCreateManyWithoutRsvpInputInputObject =
  | Extract<keyof GuestCreateManyWithoutRsvpInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GuestCreateWithoutRsvpInput {
  id?: string | null
  forename?: string
  surname?: string
  attending?: boolean | null
}
export type GuestCreateWithoutRsvpInputInputObject =
  | Extract<keyof GuestCreateWithoutRsvpInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  
export interface RSVPUpdateInput {
  party?: string | null
  guests?: GuestUpdateManyWithoutRsvpInput | null
}
export type RSVPUpdateInputInputObject =
  | Extract<keyof RSVPUpdateInput, string>
  | { name: 'party', alias?: string  } 
  | { name: 'guests', alias?: string  } 
  
export interface GuestUpdateManyWithoutRsvpInput {
  create?: GuestCreateWithoutRsvpInput[]
  delete?: GuestWhereUniqueInput[]
  connect?: GuestWhereUniqueInput[]
  set?: GuestWhereUniqueInput[]
  disconnect?: GuestWhereUniqueInput[]
  update?: GuestUpdateWithWhereUniqueWithoutRsvpInput[]
  upsert?: GuestUpsertWithWhereUniqueWithoutRsvpInput[]
  deleteMany?: GuestScalarWhereInput[]
  updateMany?: GuestUpdateManyWithWhereNestedInput[]
}
export type GuestUpdateManyWithoutRsvpInputInputObject =
  | Extract<keyof GuestUpdateManyWithoutRsvpInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface GuestUpdateWithWhereUniqueWithoutRsvpInput {
  where?: GuestWhereUniqueInput
  data?: GuestUpdateWithoutRsvpDataInput
}
export type GuestUpdateWithWhereUniqueWithoutRsvpInputInputObject =
  | Extract<keyof GuestUpdateWithWhereUniqueWithoutRsvpInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuestUpdateWithoutRsvpDataInput {
  forename?: string | null
  surname?: string | null
  attending?: boolean | null
}
export type GuestUpdateWithoutRsvpDataInputInputObject =
  | Extract<keyof GuestUpdateWithoutRsvpDataInput, string>
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  
export interface GuestUpsertWithWhereUniqueWithoutRsvpInput {
  where?: GuestWhereUniqueInput
  update?: GuestUpdateWithoutRsvpDataInput
  create?: GuestCreateWithoutRsvpInput
}
export type GuestUpsertWithWhereUniqueWithoutRsvpInputInputObject =
  | Extract<keyof GuestUpsertWithWhereUniqueWithoutRsvpInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuestScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  forename?: string | null
  forename_not?: string | null
  forename_in?: string[]
  forename_not_in?: string[]
  forename_lt?: string | null
  forename_lte?: string | null
  forename_gt?: string | null
  forename_gte?: string | null
  forename_contains?: string | null
  forename_not_contains?: string | null
  forename_starts_with?: string | null
  forename_not_starts_with?: string | null
  forename_ends_with?: string | null
  forename_not_ends_with?: string | null
  surname?: string | null
  surname_not?: string | null
  surname_in?: string[]
  surname_not_in?: string[]
  surname_lt?: string | null
  surname_lte?: string | null
  surname_gt?: string | null
  surname_gte?: string | null
  surname_contains?: string | null
  surname_not_contains?: string | null
  surname_starts_with?: string | null
  surname_not_starts_with?: string | null
  surname_ends_with?: string | null
  surname_not_ends_with?: string | null
  attending?: boolean | null
  attending_not?: boolean | null
  AND?: GuestScalarWhereInput[]
  OR?: GuestScalarWhereInput[]
  NOT?: GuestScalarWhereInput[]
}
export type GuestScalarWhereInputInputObject =
  | Extract<keyof GuestScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'forename', alias?: string  } 
  | { name: 'forename_not', alias?: string  } 
  | { name: 'forename_in', alias?: string  } 
  | { name: 'forename_not_in', alias?: string  } 
  | { name: 'forename_lt', alias?: string  } 
  | { name: 'forename_lte', alias?: string  } 
  | { name: 'forename_gt', alias?: string  } 
  | { name: 'forename_gte', alias?: string  } 
  | { name: 'forename_contains', alias?: string  } 
  | { name: 'forename_not_contains', alias?: string  } 
  | { name: 'forename_starts_with', alias?: string  } 
  | { name: 'forename_not_starts_with', alias?: string  } 
  | { name: 'forename_ends_with', alias?: string  } 
  | { name: 'forename_not_ends_with', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'surname_not', alias?: string  } 
  | { name: 'surname_in', alias?: string  } 
  | { name: 'surname_not_in', alias?: string  } 
  | { name: 'surname_lt', alias?: string  } 
  | { name: 'surname_lte', alias?: string  } 
  | { name: 'surname_gt', alias?: string  } 
  | { name: 'surname_gte', alias?: string  } 
  | { name: 'surname_contains', alias?: string  } 
  | { name: 'surname_not_contains', alias?: string  } 
  | { name: 'surname_starts_with', alias?: string  } 
  | { name: 'surname_not_starts_with', alias?: string  } 
  | { name: 'surname_ends_with', alias?: string  } 
  | { name: 'surname_not_ends_with', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  | { name: 'attending_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuestUpdateManyWithWhereNestedInput {
  where?: GuestScalarWhereInput
  data?: GuestUpdateManyDataInput
}
export type GuestUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof GuestUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface GuestUpdateManyDataInput {
  forename?: string | null
  surname?: string | null
  attending?: boolean | null
}
export type GuestUpdateManyDataInputInputObject =
  | Extract<keyof GuestUpdateManyDataInput, string>
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  
export interface RSVPUpdateManyMutationInput {
  party?: string | null
}
export type RSVPUpdateManyMutationInputInputObject =
  | Extract<keyof RSVPUpdateManyMutationInput, string>
  | { name: 'party', alias?: string  } 
  
export interface GuestCreateInput {
  id?: string | null
  forename?: string
  surname?: string
  attending?: boolean | null
  rsvp?: RSVPCreateOneWithoutGuestsInput
}
export type GuestCreateInputInputObject =
  | Extract<keyof GuestCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  | { name: 'rsvp', alias?: string  } 
  
export interface RSVPCreateOneWithoutGuestsInput {
  create?: RSVPCreateWithoutGuestsInput | null
  connect?: RSVPWhereUniqueInput | null
}
export type RSVPCreateOneWithoutGuestsInputInputObject =
  | Extract<keyof RSVPCreateOneWithoutGuestsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RSVPCreateWithoutGuestsInput {
  id?: string | null
  party?: string
}
export type RSVPCreateWithoutGuestsInputInputObject =
  | Extract<keyof RSVPCreateWithoutGuestsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'party', alias?: string  } 
  
export interface GuestUpdateInput {
  forename?: string | null
  surname?: string | null
  attending?: boolean | null
  rsvp?: RSVPUpdateOneRequiredWithoutGuestsInput | null
}
export type GuestUpdateInputInputObject =
  | Extract<keyof GuestUpdateInput, string>
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  | { name: 'rsvp', alias?: string  } 
  
export interface RSVPUpdateOneRequiredWithoutGuestsInput {
  create?: RSVPCreateWithoutGuestsInput | null
  update?: RSVPUpdateWithoutGuestsDataInput | null
  upsert?: RSVPUpsertWithoutGuestsInput | null
  connect?: RSVPWhereUniqueInput | null
}
export type RSVPUpdateOneRequiredWithoutGuestsInputInputObject =
  | Extract<keyof RSVPUpdateOneRequiredWithoutGuestsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RSVPUpdateWithoutGuestsDataInput {
  party?: string | null
}
export type RSVPUpdateWithoutGuestsDataInputInputObject =
  | Extract<keyof RSVPUpdateWithoutGuestsDataInput, string>
  | { name: 'party', alias?: string  } 
  
export interface RSVPUpsertWithoutGuestsInput {
  update?: RSVPUpdateWithoutGuestsDataInput
  create?: RSVPCreateWithoutGuestsInput
}
export type RSVPUpsertWithoutGuestsInputInputObject =
  | Extract<keyof RSVPUpsertWithoutGuestsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GuestUpdateManyMutationInput {
  forename?: string | null
  surname?: string | null
  attending?: boolean | null
}
export type GuestUpdateManyMutationInputInputObject =
  | Extract<keyof GuestUpdateManyMutationInput, string>
  | { name: 'forename', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'attending', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RSVPSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RSVPWhereInput | null
  AND?: RSVPSubscriptionWhereInput[]
  OR?: RSVPSubscriptionWhereInput[]
  NOT?: RSVPSubscriptionWhereInput[]
}
export type RSVPSubscriptionWhereInputInputObject =
  | Extract<keyof RSVPSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GuestSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GuestWhereInput | null
  AND?: GuestSubscriptionWhereInput[]
  OR?: GuestSubscriptionWhereInput[]
  NOT?: GuestSubscriptionWhereInput[]
}
export type GuestSubscriptionWhereInputInputObject =
  | Extract<keyof GuestSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GuestOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'forename_ASC'
  | 'forename_DESC'
  | 'surname_ASC'
  | 'surname_DESC'
  | 'attending_ASC'
  | 'attending_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RSVPOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'party_ASC'
  | 'party_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  