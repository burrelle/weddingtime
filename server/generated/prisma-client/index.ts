// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  guest: (where?: GuestWhereInput) => Promise<boolean>;
  rSVP: (where?: RSVPWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  guest: (where: GuestWhereUniqueInput) => GuestNullablePromise;
  guests: (args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Guest>;
  guestsConnection: (args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GuestConnectionPromise;
  rSVP: (where: RSVPWhereUniqueInput) => RSVPNullablePromise;
  rSVPs: (args?: {
    where?: RSVPWhereInput;
    orderBy?: RSVPOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RSVP>;
  rSVPsConnection: (args?: {
    where?: RSVPWhereInput;
    orderBy?: RSVPOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RSVPConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGuest: (data: GuestCreateInput) => GuestPromise;
  updateGuest: (args: {
    data: GuestUpdateInput;
    where: GuestWhereUniqueInput;
  }) => GuestPromise;
  updateManyGuests: (args: {
    data: GuestUpdateManyMutationInput;
    where?: GuestWhereInput;
  }) => BatchPayloadPromise;
  upsertGuest: (args: {
    where: GuestWhereUniqueInput;
    create: GuestCreateInput;
    update: GuestUpdateInput;
  }) => GuestPromise;
  deleteGuest: (where: GuestWhereUniqueInput) => GuestPromise;
  deleteManyGuests: (where?: GuestWhereInput) => BatchPayloadPromise;
  createRSVP: (data: RSVPCreateInput) => RSVPPromise;
  updateRSVP: (args: {
    data: RSVPUpdateInput;
    where: RSVPWhereUniqueInput;
  }) => RSVPPromise;
  updateManyRSVPs: (args: {
    data: RSVPUpdateManyMutationInput;
    where?: RSVPWhereInput;
  }) => BatchPayloadPromise;
  upsertRSVP: (args: {
    where: RSVPWhereUniqueInput;
    create: RSVPCreateInput;
    update: RSVPUpdateInput;
  }) => RSVPPromise;
  deleteRSVP: (where: RSVPWhereUniqueInput) => RSVPPromise;
  deleteManyRSVPs: (where?: RSVPWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  guest: (
    where?: GuestSubscriptionWhereInput
  ) => GuestSubscriptionPayloadSubscription;
  rSVP: (
    where?: RSVPSubscriptionWhereInput
  ) => RSVPSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GuestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "forename_ASC"
  | "forename_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "attending_ASC"
  | "attending_DESC";

export type RSVPOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "party_ASC"
  | "party_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GuestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GuestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  forename?: Maybe<String>;
  forename_not?: Maybe<String>;
  forename_in?: Maybe<String[] | String>;
  forename_not_in?: Maybe<String[] | String>;
  forename_lt?: Maybe<String>;
  forename_lte?: Maybe<String>;
  forename_gt?: Maybe<String>;
  forename_gte?: Maybe<String>;
  forename_contains?: Maybe<String>;
  forename_not_contains?: Maybe<String>;
  forename_starts_with?: Maybe<String>;
  forename_not_starts_with?: Maybe<String>;
  forename_ends_with?: Maybe<String>;
  forename_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  attending?: Maybe<Boolean>;
  attending_not?: Maybe<Boolean>;
  rsvp?: Maybe<RSVPWhereInput>;
  AND?: Maybe<GuestWhereInput[] | GuestWhereInput>;
  OR?: Maybe<GuestWhereInput[] | GuestWhereInput>;
  NOT?: Maybe<GuestWhereInput[] | GuestWhereInput>;
}

export interface RSVPWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  party?: Maybe<String>;
  party_not?: Maybe<String>;
  party_in?: Maybe<String[] | String>;
  party_not_in?: Maybe<String[] | String>;
  party_lt?: Maybe<String>;
  party_lte?: Maybe<String>;
  party_gt?: Maybe<String>;
  party_gte?: Maybe<String>;
  party_contains?: Maybe<String>;
  party_not_contains?: Maybe<String>;
  party_starts_with?: Maybe<String>;
  party_not_starts_with?: Maybe<String>;
  party_ends_with?: Maybe<String>;
  party_not_ends_with?: Maybe<String>;
  guests_every?: Maybe<GuestWhereInput>;
  guests_some?: Maybe<GuestWhereInput>;
  guests_none?: Maybe<GuestWhereInput>;
  AND?: Maybe<RSVPWhereInput[] | RSVPWhereInput>;
  OR?: Maybe<RSVPWhereInput[] | RSVPWhereInput>;
  NOT?: Maybe<RSVPWhereInput[] | RSVPWhereInput>;
}

export type RSVPWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  party?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GuestCreateInput {
  id?: Maybe<ID_Input>;
  forename: String;
  surname: String;
  attending?: Maybe<Boolean>;
  rsvp: RSVPCreateOneWithoutGuestsInput;
}

export interface RSVPCreateOneWithoutGuestsInput {
  create?: Maybe<RSVPCreateWithoutGuestsInput>;
  connect?: Maybe<RSVPWhereUniqueInput>;
}

export interface RSVPCreateWithoutGuestsInput {
  id?: Maybe<ID_Input>;
  party: String;
}

export interface GuestUpdateInput {
  forename?: Maybe<String>;
  surname?: Maybe<String>;
  attending?: Maybe<Boolean>;
  rsvp?: Maybe<RSVPUpdateOneRequiredWithoutGuestsInput>;
}

export interface RSVPUpdateOneRequiredWithoutGuestsInput {
  create?: Maybe<RSVPCreateWithoutGuestsInput>;
  update?: Maybe<RSVPUpdateWithoutGuestsDataInput>;
  upsert?: Maybe<RSVPUpsertWithoutGuestsInput>;
  connect?: Maybe<RSVPWhereUniqueInput>;
}

export interface RSVPUpdateWithoutGuestsDataInput {
  party?: Maybe<String>;
}

export interface RSVPUpsertWithoutGuestsInput {
  update: RSVPUpdateWithoutGuestsDataInput;
  create: RSVPCreateWithoutGuestsInput;
}

export interface GuestUpdateManyMutationInput {
  forename?: Maybe<String>;
  surname?: Maybe<String>;
  attending?: Maybe<Boolean>;
}

export interface RSVPCreateInput {
  id?: Maybe<ID_Input>;
  party: String;
  guests?: Maybe<GuestCreateManyWithoutRsvpInput>;
}

export interface GuestCreateManyWithoutRsvpInput {
  create?: Maybe<GuestCreateWithoutRsvpInput[] | GuestCreateWithoutRsvpInput>;
  connect?: Maybe<GuestWhereUniqueInput[] | GuestWhereUniqueInput>;
}

export interface GuestCreateWithoutRsvpInput {
  id?: Maybe<ID_Input>;
  forename: String;
  surname: String;
  attending?: Maybe<Boolean>;
}

export interface RSVPUpdateInput {
  party?: Maybe<String>;
  guests?: Maybe<GuestUpdateManyWithoutRsvpInput>;
}

export interface GuestUpdateManyWithoutRsvpInput {
  create?: Maybe<GuestCreateWithoutRsvpInput[] | GuestCreateWithoutRsvpInput>;
  delete?: Maybe<GuestWhereUniqueInput[] | GuestWhereUniqueInput>;
  connect?: Maybe<GuestWhereUniqueInput[] | GuestWhereUniqueInput>;
  set?: Maybe<GuestWhereUniqueInput[] | GuestWhereUniqueInput>;
  disconnect?: Maybe<GuestWhereUniqueInput[] | GuestWhereUniqueInput>;
  update?: Maybe<
    | GuestUpdateWithWhereUniqueWithoutRsvpInput[]
    | GuestUpdateWithWhereUniqueWithoutRsvpInput
  >;
  upsert?: Maybe<
    | GuestUpsertWithWhereUniqueWithoutRsvpInput[]
    | GuestUpsertWithWhereUniqueWithoutRsvpInput
  >;
  deleteMany?: Maybe<GuestScalarWhereInput[] | GuestScalarWhereInput>;
  updateMany?: Maybe<
    GuestUpdateManyWithWhereNestedInput[] | GuestUpdateManyWithWhereNestedInput
  >;
}

export interface GuestUpdateWithWhereUniqueWithoutRsvpInput {
  where: GuestWhereUniqueInput;
  data: GuestUpdateWithoutRsvpDataInput;
}

export interface GuestUpdateWithoutRsvpDataInput {
  forename?: Maybe<String>;
  surname?: Maybe<String>;
  attending?: Maybe<Boolean>;
}

export interface GuestUpsertWithWhereUniqueWithoutRsvpInput {
  where: GuestWhereUniqueInput;
  update: GuestUpdateWithoutRsvpDataInput;
  create: GuestCreateWithoutRsvpInput;
}

export interface GuestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  forename?: Maybe<String>;
  forename_not?: Maybe<String>;
  forename_in?: Maybe<String[] | String>;
  forename_not_in?: Maybe<String[] | String>;
  forename_lt?: Maybe<String>;
  forename_lte?: Maybe<String>;
  forename_gt?: Maybe<String>;
  forename_gte?: Maybe<String>;
  forename_contains?: Maybe<String>;
  forename_not_contains?: Maybe<String>;
  forename_starts_with?: Maybe<String>;
  forename_not_starts_with?: Maybe<String>;
  forename_ends_with?: Maybe<String>;
  forename_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  attending?: Maybe<Boolean>;
  attending_not?: Maybe<Boolean>;
  AND?: Maybe<GuestScalarWhereInput[] | GuestScalarWhereInput>;
  OR?: Maybe<GuestScalarWhereInput[] | GuestScalarWhereInput>;
  NOT?: Maybe<GuestScalarWhereInput[] | GuestScalarWhereInput>;
}

export interface GuestUpdateManyWithWhereNestedInput {
  where: GuestScalarWhereInput;
  data: GuestUpdateManyDataInput;
}

export interface GuestUpdateManyDataInput {
  forename?: Maybe<String>;
  surname?: Maybe<String>;
  attending?: Maybe<Boolean>;
}

export interface RSVPUpdateManyMutationInput {
  party?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GuestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GuestWhereInput>;
  AND?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
  OR?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
  NOT?: Maybe<GuestSubscriptionWhereInput[] | GuestSubscriptionWhereInput>;
}

export interface RSVPSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RSVPWhereInput>;
  AND?: Maybe<RSVPSubscriptionWhereInput[] | RSVPSubscriptionWhereInput>;
  OR?: Maybe<RSVPSubscriptionWhereInput[] | RSVPSubscriptionWhereInput>;
  NOT?: Maybe<RSVPSubscriptionWhereInput[] | RSVPSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Guest {
  id: ID_Output;
  forename: String;
  surname: String;
  attending: Boolean;
}

export interface GuestPromise extends Promise<Guest>, Fragmentable {
  id: () => Promise<ID_Output>;
  forename: () => Promise<String>;
  surname: () => Promise<String>;
  attending: () => Promise<Boolean>;
  rsvp: <T = RSVPPromise>() => T;
}

export interface GuestSubscription
  extends Promise<AsyncIterator<Guest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  forename: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  attending: () => Promise<AsyncIterator<Boolean>>;
  rsvp: <T = RSVPSubscription>() => T;
}

export interface GuestNullablePromise
  extends Promise<Guest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  forename: () => Promise<String>;
  surname: () => Promise<String>;
  attending: () => Promise<Boolean>;
  rsvp: <T = RSVPPromise>() => T;
}

export interface RSVP {
  id: ID_Output;
  party: String;
}

export interface RSVPPromise extends Promise<RSVP>, Fragmentable {
  id: () => Promise<ID_Output>;
  party: () => Promise<String>;
  guests: <T = FragmentableArray<Guest>>(args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RSVPSubscription
  extends Promise<AsyncIterator<RSVP>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  party: () => Promise<AsyncIterator<String>>;
  guests: <T = Promise<AsyncIterator<GuestSubscription>>>(args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RSVPNullablePromise
  extends Promise<RSVP | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  party: () => Promise<String>;
  guests: <T = FragmentableArray<Guest>>(args?: {
    where?: GuestWhereInput;
    orderBy?: GuestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GuestConnection {
  pageInfo: PageInfo;
  edges: GuestEdge[];
}

export interface GuestConnectionPromise
  extends Promise<GuestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GuestEdge>>() => T;
  aggregate: <T = AggregateGuestPromise>() => T;
}

export interface GuestConnectionSubscription
  extends Promise<AsyncIterator<GuestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuestSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GuestEdge {
  node: Guest;
  cursor: String;
}

export interface GuestEdgePromise extends Promise<GuestEdge>, Fragmentable {
  node: <T = GuestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GuestEdgeSubscription
  extends Promise<AsyncIterator<GuestEdge>>,
    Fragmentable {
  node: <T = GuestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuest {
  count: Int;
}

export interface AggregateGuestPromise
  extends Promise<AggregateGuest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuestSubscription
  extends Promise<AsyncIterator<AggregateGuest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RSVPConnection {
  pageInfo: PageInfo;
  edges: RSVPEdge[];
}

export interface RSVPConnectionPromise
  extends Promise<RSVPConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RSVPEdge>>() => T;
  aggregate: <T = AggregateRSVPPromise>() => T;
}

export interface RSVPConnectionSubscription
  extends Promise<AsyncIterator<RSVPConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RSVPEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRSVPSubscription>() => T;
}

export interface RSVPEdge {
  node: RSVP;
  cursor: String;
}

export interface RSVPEdgePromise extends Promise<RSVPEdge>, Fragmentable {
  node: <T = RSVPPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RSVPEdgeSubscription
  extends Promise<AsyncIterator<RSVPEdge>>,
    Fragmentable {
  node: <T = RSVPSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRSVP {
  count: Int;
}

export interface AggregateRSVPPromise
  extends Promise<AggregateRSVP>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRSVPSubscription
  extends Promise<AsyncIterator<AggregateRSVP>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GuestSubscriptionPayload {
  mutation: MutationType;
  node: Guest;
  updatedFields: String[];
  previousValues: GuestPreviousValues;
}

export interface GuestSubscriptionPayloadPromise
  extends Promise<GuestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GuestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuestPreviousValuesPromise>() => T;
}

export interface GuestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuestPreviousValuesSubscription>() => T;
}

export interface GuestPreviousValues {
  id: ID_Output;
  forename: String;
  surname: String;
  attending: Boolean;
}

export interface GuestPreviousValuesPromise
  extends Promise<GuestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  forename: () => Promise<String>;
  surname: () => Promise<String>;
  attending: () => Promise<Boolean>;
}

export interface GuestPreviousValuesSubscription
  extends Promise<AsyncIterator<GuestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  forename: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  attending: () => Promise<AsyncIterator<Boolean>>;
}

export interface RSVPSubscriptionPayload {
  mutation: MutationType;
  node: RSVP;
  updatedFields: String[];
  previousValues: RSVPPreviousValues;
}

export interface RSVPSubscriptionPayloadPromise
  extends Promise<RSVPSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RSVPPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RSVPPreviousValuesPromise>() => T;
}

export interface RSVPSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RSVPSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RSVPSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RSVPPreviousValuesSubscription>() => T;
}

export interface RSVPPreviousValues {
  id: ID_Output;
  party: String;
}

export interface RSVPPreviousValuesPromise
  extends Promise<RSVPPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  party: () => Promise<String>;
}

export interface RSVPPreviousValuesSubscription
  extends Promise<AsyncIterator<RSVPPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  party: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "RSVP",
    embedded: false
  },
  {
    name: "Guest",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
